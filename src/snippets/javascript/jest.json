{
  "jest: describe": {
    "body": [
      "describe('${1:example}', () => {",
      "$2",
      "});"
    ],
    "description": "Jest: describe block",
    "prefix": ["describe", "desc"]
  },
  "jest: it": {
    "body": [
      "it('Should ${1:return an example with success}', () => {",
      "  // arrange",
      "  // act",
      "  // assert",
      "});"
    ],
    "description": "Jest: it block",
    "prefix": ["jest-it", "it"]
  },
  "jest: describe & it": {
    "body": [
      "describe('${1:example}', () => {",
      "",
      "  it('Should ${2:return an example with success}', () => {",
      "    // arrange",
      "    // act",
      "    // assert",
      "  });",
      "",
      "});"
    ],
    "description": "Jest: describe & it block",
    "prefix": ["jest-describe-it", "desc-it"]
  },
  "jest: clean mocks": {
    "body": [
      "beforeAll(() => {",
      "  jest.clearAllMocks();",
      "  jest.resetAllMocks();",
      "});"
    ],
    "description": "Jest: clean mocks",
    "prefix": ["jest-clean-mocks", "clean-mocks"]
  },
  "jest: mock function": {
    "body": [
      "const mock${1:Example} = jest.fn().mockImplementation(${1:Example});",
      "const result = mock${1:Example}($2);",
      "expect(result).toStrictEqual($3);",
      "expect(mock${1:Example}).toHaveBeenNthCalledWith(1, $4);"
    ],
    "description": "Jest: template for mock a function",
    "prefix": ["jest-mock-function", "mock-function", "mockfn"]
  },
  "jest: assert fail": {
    "body": [
      "it('Should throw an error \"${1:expectedError}\" when ${2:operator}', () => {",
      "  // arrange",
      "  // act",
      "  let result;",
      "  try {",
      "    result = ${3:functionToCheck}",
      "  } catch (error) {",
      "    result = error;",
      "  }",
      "  // assert",
      "  expect(result).toStrictEqual(new Error('${1:expectedError}'));",
      "});"
    ],
    "description": "Jest: Throw a failure.",
    "prefix": ["jest-assert-fail", "assert-fail"]
  }
}
